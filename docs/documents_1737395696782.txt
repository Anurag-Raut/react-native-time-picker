{
    "/react-native-time-picker/": {
        "title": "React native time picker",
        "text": "React  Native TimePicker A customizable and visually appealing time picker for React Native. Features Customizable components. AM/PM period support. Drag-and-drop time selection. Links Github :  https://github.com/Anurag-Raut/react-native-time-picker NPM :  https://www.npmjs.com/package/rn-time-picker"
    },
    "/react-native-time-picker/documentation/getting-started/": {
        "title": "Getting Started",
        "text": "Getting Started Installation yarn Shell yarn  add  rn-time-picker npm Shell npm  install  rn-time-picker Basic setup JavaScript import  TimePicker  from  \"rn-time-picker\" ; \n \n export  default  function  App ()  { \n     return  ( \n         < TimePicker  radius ={ 120 }  /> \n     ); \n }"
    },
    "/react-native-time-picker/documentation/props/": {
        "title": "Props",
        "text": "Props Required Props Prop Type Description radius number The radius of the clock circle. This controls the overall size of the TimePicker. Optional props Prop Type Default Value Description numberRadius number radius - 40 Radius for positioning clock numbers. colors Colors See defaults Customize clock elements, active/inactive colors, etc. initialHour number 12 Initial hour value (0–12 for AM/PM mode). initialMinute initialMinute 0 Initial minute value (0–59). initialPeriod 'am'  |  'pm' 'am' Initial period (AM or PM). customComponents Custom Components   - Replace parts of the TimePicker with your own React components. customStyles Custom Styles - customStyles onValueChange (hour, minute, period) => void - Callback triggered when the time value changes."
    },
    "/react-native-time-picker/documentation/customization/": {
        "title": "Customization",
        "text": "Customization Custom Styles Customize the appearance of the  TimePicker  using the  customStyles  prop. Below are the keys you can use: Key Type Description container ViewStyle Style for the overall container of the TimePicker. clock ViewStyle Style for the clock’s outer circle. activeNumber TextStyle Style for the currently selected number. clockText TextStyle Style for the clock numbers. indicatorLine ViewStyle Style for the indicator line. centerComponent ViewStyle Style for the clock center component. Custom components Replace parts of the TimePicker with your own React Native components using the  customComponents  prop. Below are the available keys: Key Type Description CenterComponent React.ReactNode Custom center element of the clock. LineComponent React.ReactNode Custom line connecting the center to numbers. EndComponent React.ReactNode Custom end component for the clock hand. NumberComponent (props: { value, isActive }) => React.ReactNode Custom number component for clock labels. TopComponent (props) => React.ReactNode Custom top section. (Display of hours ,minutes and period) Colors Use the  colors  prop to customize the color palette of the TimePicker. If not provided, default colors will be used. Key Type Description clockActiveColor string Color of the active clock region. clockActiveTextColor string Text color for active clock numbers. topActiveColor string Custom end component for the clock hand. topInActiveColor string Custom number component for clock labels. topActiveTextColor string Custom top section. (Display of hours ,minutes and period) topInActiveTextColor string Text color for the inactive top section."
    },
    "/react-native-time-picker/documentation/examples/": {
        "title": "Examples",
        "text": "Examples Basic Example TypeScript import  TimePicker  from  \"rn-time-picker\" \n \n export  default function BasicTimePickerExample(){ \n     return  ( \n         < TimePicker \n         radius = { 120} \n         numberRadius = { 100} \n         customStyles = {{ \n           container:  { \n             backgroundColor:  \"gray\", \n             padding:  12, \n             borderRadius:  10 \n           }, \n           clock:  { \n             backgroundColor:  \"#1A1A1D\" \n           } \n         }} \n         colors = {{ clockActiveColor: \"#6A1E55\", topActiveColor: \"rgba(166, 77, 121,0.7)\", topActiveTextColor: \"white\", }} /> \n \n       \n     ) \n } Example with custom components TypeScript import  { StyleSheet, Text, TouchableHighlight, View, TextStyle, ViewStyle }  from  'react-native' ; \n import  TimePicker, { Mode }  from  \"rn-time-picker\" ; \n \n interface  NumberComponentProps  { \n   value :  number ; \n   isActive :  boolean ; \n } \n \n interface  TopComponentProps  { \n   hour :  number ; \n   minute :  number ; \n   switchMode :  ( mode :  Mode )  =>  void ; \n   activeMode :  Mode ; \n   period :  \"am\"  |  \"pm\" ; \n   setPeriod :  ( period :  \"am\"  |  \"pm\" )  =>  void ; \n } \n \n interface  StyleTypes  { \n   container :  ViewStyle ; \n   timePickerContainer :  ViewStyle ; \n   timePickerClock :  ViewStyle ; \n   activeNumber :  TextStyle ; \n   inActiveNumber :  TextStyle ; \n   numberComponent :  TextStyle ; \n   activeNumberComponent :  ViewStyle ; \n   timeText :  TextStyle ; \n   activeTimeText :  ViewStyle ; \n   amPmContainer :  ViewStyle ; \n   periodContainer :  ViewStyle ; \n   activePeriodAM :  ViewStyle ; \n   activePeriodPM :  ViewStyle ; \n   amPmText :  TextStyle ; \n   activePeriodText :  TextStyle ; \n } \n \n export  default  function  CustomizedTimePickerExample () :  JSX.Element  { \n   const  NumberComponent  =  ({  value ,  isActive  } :  NumberComponentProps ) :  JSX . Element  =>  ( \n     < Text style = {[ \n       styles.numberComponent, \n       isActive  &&  styles.activeNumberComponent \n     ]}> \n       {value} \n     </Text> \n   ); \n \n   const TopComponent = ({ \n     hour, \n     minute, \n     switchMode, \n     activeMode, \n     period, \n     setPeriod \n   }: TopComponentProps) :  JSX . Element  =>  { \n     return  ( \n       < View style = {styles.container} > \n         < Text \n           style = {[ \n             styles.timeText, \n             activeMode  ===  Mode. HOUR  &&  styles.activeTimeText \n           ]} \n           onPress={() => switchMode(Mode.HOUR)} \n         > \n           {hour.toString().padStart(2, \"0\")} \n         </Text> \n \n         <Text \n           style={[ \n             styles.timeText, \n             activeMode  ===  Mode. MINUTE  &&  styles.activeTimeText \n           ]} \n           onPress={() => switchMode(Mode.MINUTE)} \n         > \n           {minute.toString().padStart(2, \"0\")} \n         </Text> \n \n         <TouchableHighlight \n           onPress={() => setPeriod(period === \"am\" ? \"pm\" :  \"am\" )} \n           style = {styles.amPmContainer} \n         > \n           <> \n             < View \n               style = {[ \n                 styles.periodContainer, \n                 period  ===  \"am\"  &&  styles.activePeriodAM \n               ]} \n             > \n               <Text \n                 style={[ \n                   styles.amPmText, \n                   period  ===  \"am\"  &&  styles.activePeriodText \n                 ]} \n               > \n                 AM \n               </Text> \n             </View> \n \n             <View \n               style={[ \n                 styles.periodContainer, \n                 period  ===  \"pm\"  &&  styles.activePeriodPM \n               ]} \n             > \n               <Text \n                 style={[ \n                   styles.amPmText, \n                   period  ===  \"pm\"  &&  styles.activePeriodText \n                 ]} \n               > \n                 PM \n               </Text> \n             </View> \n           </> \n         </TouchableHighlight> \n       </View> \n     ); \n   }; \n \n   return ( \n     <TimePicker \n       radius={140} \n       numberRadius={110} \n       customComponents={{ \n         NumberComponent, \n         TopComponent \n       }} \n       customStyles={{ \n         container: styles.timePickerContainer, \n         clock: styles.timePickerClock, \n         activeNumber: styles.activeNumber, \n         inActiveNumber: styles.inActiveNumber \n       }} \n       colors = {{ \n         clockActiveColor :  \"#FF6500\" , \n         topActiveColor :  \"#0B192C\" , \n         topActiveTextColor :  \"white\" , \n         topInActiveTextColor :  \"black\" \n       }} \n     /> \n   ); \n } \n \n const styles  =  StyleSheet. create < StyleTypes >({ \n   container: { \n     flexDirection:  \"row\" , \n     gap:  12 , \n   }, \n   timePickerContainer: { \n     backgroundColor:  \"gray\" , \n     padding:  12 , \n     borderRadius:  10 \n   }, \n   timePickerClock: { \n     backgroundColor:  \"#1E3E62\" \n   }, \n   activeNumber: { \n     fontSize:  19 , \n     width:  40 , \n     height:  40 \n   }, \n   inActiveNumber: { \n     fontSize:  19 , \n     width:  40 , \n     height:  40 \n   }, \n   numberComponent: { \n     height:  55 , \n     width:  55 , \n     borderRadius:  100 , \n     zIndex:  10 , \n     textAlignVertical:  \"center\" , \n     textAlign:  \"center\" , \n     fontWeight:  \"600\" , \n     fontSize:  20 , \n     color:  \"white\" \n   }, \n   activeNumberComponent: { \n     backgroundColor:  \"#FF6500\" \n   }, \n   timeText: { \n     fontSize:  18 , \n     fontWeight:  \"600\" , \n     backgroundColor:  \"rgba(30, 62, 98,0.7)\" , \n     padding:  12 , \n     borderRadius:  12 , \n     color:  \"white\" \n   }, \n   activeTimeText: { \n     backgroundColor:  \"#FF6500\" \n   }, \n   amPmContainer: { \n     flexDirection:  \"column\" , \n     borderColor:  \"black\" , \n     borderWidth:  1 , \n   }, \n   periodContainer: { \n     padding:  4 , \n     borderRadius:  8 , \n     justifyContent:  \"center\" , \n     alignItems:  \"center\" , \n   }, \n   activePeriodAM: { \n     backgroundColor:  \"#32CD32\" \n   }, \n   activePeriodPM: { \n     backgroundColor:  \"#FFD700\" \n   }, \n   amPmText: { \n     fontSize:  12 , \n     fontWeight:  \"600\" , \n   }, \n   activePeriodText: { \n     color:  \"#FFFFFF\" \n   } \n });"
    }
}